/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BPoolProxyInterface extends ethers.utils.Interface {
  functions: {
    "batchSwapExactIn(tuple[],address,address,uint256,uint256,bool)": FunctionFragment;
    "batchSwapExactOut(tuple[],address,address,uint256,bool)": FunctionFragment;
    "exitPool(address,uint256,uint256[])": FunctionFragment;
    "exitswapExternAmountOut(address,address,uint256,uint256)": FunctionFragment;
    "exitswapPoolAmountIn(address,address,uint256,uint256)": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "joinPool(address,uint256,uint256[])": FunctionFragment;
    "joinswapExternAmountIn(address,address,uint256,uint256)": FunctionFragment;
    "joinswapPoolAmountOut(address,address,uint256,uint256)": FunctionFragment;
    "multihopBatchSwapExactIn(tuple[][],address,address,uint256,uint256,bool)": FunctionFragment;
    "multihopBatchSwapExactOut(tuple[][],address,address,uint256,bool)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeReceiver(address)": FunctionFragment;
    "setProtocolFee(address)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setUtilityToken(address)": FunctionFragment;
    "setUtilityTokenFeed(address)": FunctionFragment;
    "setXTokenWrapper(address)": FunctionFragment;
    "smartSwapExactIn(address,address,uint256,uint256,uint256,bool)": FunctionFragment;
    "smartSwapExactOut(address,address,uint256,uint256,uint256,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "utilityToken()": FunctionFragment;
    "utilityTokenFeed()": FunctionFragment;
    "viewSplitExactIn(address,address,uint256,uint256)": FunctionFragment;
    "viewSplitExactOut(address,address,uint256,uint256)": FunctionFragment;
    "xTokenWrapper()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchSwapExactIn",
    values: [
      {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapExactOut",
    values: [
      {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      string,
      string,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapExternAmountOut",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitswapPoolAmountIn",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapExternAmountIn",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinswapPoolAmountOut",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multihopBatchSwapExactIn",
    values: [
      {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multihopBatchSwapExactOut",
    values: [
      {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      string,
      string,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUtilityToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUtilityTokenFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setXTokenWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "smartSwapExactIn",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "smartSwapExactOut",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "utilityToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "utilityTokenFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewSplitExactIn",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewSplitExactOut",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "xTokenWrapper",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "batchSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitswapExternAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitswapPoolAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinswapExternAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinswapPoolAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multihopBatchSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multihopBatchSwapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUtilityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUtilityTokenFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setXTokenWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smartSwapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smartSwapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "utilityTokenFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewSplitExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewSplitExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xTokenWrapper",
    data: BytesLike
  ): Result;

  events: {
    "FeeReceiverSetted(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProtocolFeeSetted(address)": EventFragment;
    "RegistrySetted(address)": EventFragment;
    "UtilityTokenFeedSetted(address)": EventFragment;
    "UtilityTokenSetted(address)": EventFragment;
    "XTokenWrapperSetted(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeReceiverSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrySetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UtilityTokenFeedSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UtilityTokenSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XTokenWrapperSetted"): EventFragment;
}

export class BPoolProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BPoolProxyInterface;

  functions: {
    batchSwapExactIn(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchSwapExactIn(tuple[],address,address,uint256,uint256,bool)"(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    batchSwapExactOut(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchSwapExactOut(tuple[],address,address,uint256,bool)"(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitPool(
      pool: string,
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitPool(address,uint256,uint256[])"(
      pool: string,
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitswapExternAmountOut(
      pool: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitswapExternAmountOut(address,address,uint256,uint256)"(
      pool: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exitswapPoolAmountIn(
      pool: string,
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exitswapPoolAmountIn(address,address,uint256,uint256)"(
      pool: string,
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<[string]>;

    joinPool(
      pool: string,
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinPool(address,uint256,uint256[])"(
      pool: string,
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinswapExternAmountIn(
      pool: string,
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinswapExternAmountIn(address,address,uint256,uint256)"(
      pool: string,
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinswapPoolAmountOut(
      pool: string,
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinswapPoolAmountOut(address,address,uint256,uint256)"(
      pool: string,
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multihopBatchSwapExactIn(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multihopBatchSwapExactIn(tuple[][],address,address,uint256,uint256,bool)"(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multihopBatchSwapExactOut(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multihopBatchSwapExactOut(tuple[][],address,address,uint256,bool)"(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    protocolFee(overrides?: CallOverrides): Promise<[string]>;

    "protocolFee()"(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeReceiver(address)"(
      _feeReceiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _protocolFee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProtocolFee(address)"(
      _protocolFee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUtilityToken(
      _utilityToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUtilityToken(address)"(
      _utilityToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUtilityTokenFeed(
      _utilityTokenFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUtilityTokenFeed(address)"(
      _utilityTokenFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    smartSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "smartSwapExactIn(address,address,uint256,uint256,uint256,bool)"(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    smartSwapExactOut(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "smartSwapExactOut(address,address,uint256,uint256,uint256,bool)"(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    utilityToken(overrides?: CallOverrides): Promise<[string]>;

    "utilityToken()"(overrides?: CallOverrides): Promise<[string]>;

    utilityTokenFeed(overrides?: CallOverrides): Promise<[string]>;

    "utilityTokenFeed()"(overrides?: CallOverrides): Promise<[string]>;

    viewSplitExactIn(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[],
        BigNumber
      ] & {
        swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[];
        totalOutput: BigNumber;
      }
    >;

    "viewSplitExactIn(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[],
        BigNumber
      ] & {
        swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[];
        totalOutput: BigNumber;
      }
    >;

    viewSplitExactOut(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[],
        BigNumber
      ] & {
        swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[];
        totalOutput: BigNumber;
      }
    >;

    "viewSplitExactOut(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[],
        BigNumber
      ] & {
        swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[];
        totalOutput: BigNumber;
      }
    >;

    xTokenWrapper(overrides?: CallOverrides): Promise<[string]>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<[string]>;
  };

  batchSwapExactIn(
    swaps: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchSwapExactIn(tuple[],address,address,uint256,uint256,bool)"(
    swaps: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  batchSwapExactOut(
    swaps: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    tokenIn: string,
    tokenOut: string,
    maxTotalAmountIn: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchSwapExactOut(tuple[],address,address,uint256,bool)"(
    swaps: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    tokenIn: string,
    tokenOut: string,
    maxTotalAmountIn: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitPool(
    pool: string,
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitPool(address,uint256,uint256[])"(
    pool: string,
    poolAmountIn: BigNumberish,
    minAmountsOut: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitswapExternAmountOut(
    pool: string,
    tokenOut: string,
    tokenAmountOut: BigNumberish,
    maxPoolAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitswapExternAmountOut(address,address,uint256,uint256)"(
    pool: string,
    tokenOut: string,
    tokenAmountOut: BigNumberish,
    maxPoolAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exitswapPoolAmountIn(
    pool: string,
    tokenOut: string,
    poolAmountIn: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exitswapPoolAmountIn(address,address,uint256,uint256)"(
    pool: string,
    tokenOut: string,
    poolAmountIn: BigNumberish,
    minAmountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  "feeReceiver()"(overrides?: CallOverrides): Promise<string>;

  joinPool(
    pool: string,
    poolAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinPool(address,uint256,uint256[])"(
    pool: string,
    poolAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinswapExternAmountIn(
    pool: string,
    tokenIn: string,
    tokenAmountIn: BigNumberish,
    minPoolAmountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinswapExternAmountIn(address,address,uint256,uint256)"(
    pool: string,
    tokenIn: string,
    tokenAmountIn: BigNumberish,
    minPoolAmountOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinswapPoolAmountOut(
    pool: string,
    tokenIn: string,
    poolAmountOut: BigNumberish,
    maxAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinswapPoolAmountOut(address,address,uint256,uint256)"(
    pool: string,
    tokenIn: string,
    poolAmountOut: BigNumberish,
    maxAmountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multihopBatchSwapExactIn(
    swapSequences: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[][],
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multihopBatchSwapExactIn(tuple[][],address,address,uint256,uint256,bool)"(
    swapSequences: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[][],
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multihopBatchSwapExactOut(
    swapSequences: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[][],
    tokenIn: string,
    tokenOut: string,
    maxTotalAmountIn: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multihopBatchSwapExactOut(tuple[][],address,address,uint256,bool)"(
    swapSequences: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[][],
    tokenIn: string,
    tokenOut: string,
    maxTotalAmountIn: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  protocolFee(overrides?: CallOverrides): Promise<string>;

  "protocolFee()"(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setFeeReceiver(
    _feeReceiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeReceiver(address)"(
    _feeReceiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _protocolFee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProtocolFee(address)"(
    _protocolFee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRegistry(address)"(
    _registry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUtilityToken(
    _utilityToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUtilityToken(address)"(
    _utilityToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUtilityTokenFeed(
    _utilityTokenFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUtilityTokenFeed(address)"(
    _utilityTokenFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setXTokenWrapper(
    _xTokenWrapper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setXTokenWrapper(address)"(
    _xTokenWrapper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  smartSwapExactIn(
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    nPools: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "smartSwapExactIn(address,address,uint256,uint256,uint256,bool)"(
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: BigNumberish,
    minTotalAmountOut: BigNumberish,
    nPools: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  smartSwapExactOut(
    tokenIn: string,
    tokenOut: string,
    totalAmountOut: BigNumberish,
    maxTotalAmountIn: BigNumberish,
    nPools: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "smartSwapExactOut(address,address,uint256,uint256,uint256,bool)"(
    tokenIn: string,
    tokenOut: string,
    totalAmountOut: BigNumberish,
    maxTotalAmountIn: BigNumberish,
    nPools: BigNumberish,
    useUtilityToken: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  utilityToken(overrides?: CallOverrides): Promise<string>;

  "utilityToken()"(overrides?: CallOverrides): Promise<string>;

  utilityTokenFeed(overrides?: CallOverrides): Promise<string>;

  "utilityTokenFeed()"(overrides?: CallOverrides): Promise<string>;

  viewSplitExactIn(
    tokenIn: string,
    tokenOut: string,
    swapAmount: BigNumberish,
    nPools: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      ([string, string, string, BigNumber, BigNumber, BigNumber] & {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumber;
        limitReturnAmount: BigNumber;
        maxPrice: BigNumber;
      })[],
      BigNumber
    ] & {
      swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumber;
        limitReturnAmount: BigNumber;
        maxPrice: BigNumber;
      })[];
      totalOutput: BigNumber;
    }
  >;

  "viewSplitExactIn(address,address,uint256,uint256)"(
    tokenIn: string,
    tokenOut: string,
    swapAmount: BigNumberish,
    nPools: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      ([string, string, string, BigNumber, BigNumber, BigNumber] & {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumber;
        limitReturnAmount: BigNumber;
        maxPrice: BigNumber;
      })[],
      BigNumber
    ] & {
      swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumber;
        limitReturnAmount: BigNumber;
        maxPrice: BigNumber;
      })[];
      totalOutput: BigNumber;
    }
  >;

  viewSplitExactOut(
    tokenIn: string,
    tokenOut: string,
    swapAmount: BigNumberish,
    nPools: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      ([string, string, string, BigNumber, BigNumber, BigNumber] & {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumber;
        limitReturnAmount: BigNumber;
        maxPrice: BigNumber;
      })[],
      BigNumber
    ] & {
      swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumber;
        limitReturnAmount: BigNumber;
        maxPrice: BigNumber;
      })[];
      totalOutput: BigNumber;
    }
  >;

  "viewSplitExactOut(address,address,uint256,uint256)"(
    tokenIn: string,
    tokenOut: string,
    swapAmount: BigNumberish,
    nPools: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      ([string, string, string, BigNumber, BigNumber, BigNumber] & {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumber;
        limitReturnAmount: BigNumber;
        maxPrice: BigNumber;
      })[],
      BigNumber
    ] & {
      swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumber;
        limitReturnAmount: BigNumber;
        maxPrice: BigNumber;
      })[];
      totalOutput: BigNumber;
    }
  >;

  xTokenWrapper(overrides?: CallOverrides): Promise<string>;

  "xTokenWrapper()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    batchSwapExactIn(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "batchSwapExactIn(tuple[],address,address,uint256,uint256,bool)"(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchSwapExactOut(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "batchSwapExactOut(tuple[],address,address,uint256,bool)"(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitPool(
      pool: string,
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "exitPool(address,uint256,uint256[])"(
      pool: string,
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    exitswapExternAmountOut(
      pool: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitswapExternAmountOut(address,address,uint256,uint256)"(
      pool: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      pool: string,
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exitswapPoolAmountIn(address,address,uint256,uint256)"(
      pool: string,
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<string>;

    joinPool(
      pool: string,
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "joinPool(address,uint256,uint256[])"(
      pool: string,
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    joinswapExternAmountIn(
      pool: string,
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "joinswapExternAmountIn(address,address,uint256,uint256)"(
      pool: string,
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      pool: string,
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "joinswapPoolAmountOut(address,address,uint256,uint256)"(
      pool: string,
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multihopBatchSwapExactIn(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "multihopBatchSwapExactIn(tuple[][],address,address,uint256,uint256,bool)"(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multihopBatchSwapExactOut(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "multihopBatchSwapExactOut(tuple[][],address,address,uint256,bool)"(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    protocolFee(overrides?: CallOverrides): Promise<string>;

    "protocolFee()"(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeReceiver(address)"(
      _feeReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      _protocolFee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolFee(address)"(
      _protocolFee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(_registry: string, overrides?: CallOverrides): Promise<void>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUtilityToken(
      _utilityToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUtilityToken(address)"(
      _utilityToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUtilityTokenFeed(
      _utilityTokenFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUtilityTokenFeed(address)"(
      _utilityTokenFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    smartSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "smartSwapExactIn(address,address,uint256,uint256,uint256,bool)"(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    smartSwapExactOut(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "smartSwapExactOut(address,address,uint256,uint256,uint256,bool)"(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    utilityToken(overrides?: CallOverrides): Promise<string>;

    "utilityToken()"(overrides?: CallOverrides): Promise<string>;

    utilityTokenFeed(overrides?: CallOverrides): Promise<string>;

    "utilityTokenFeed()"(overrides?: CallOverrides): Promise<string>;

    viewSplitExactIn(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[],
        BigNumber
      ] & {
        swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[];
        totalOutput: BigNumber;
      }
    >;

    "viewSplitExactIn(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[],
        BigNumber
      ] & {
        swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[];
        totalOutput: BigNumber;
      }
    >;

    viewSplitExactOut(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[],
        BigNumber
      ] & {
        swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[];
        totalOutput: BigNumber;
      }
    >;

    "viewSplitExactOut(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[],
        BigNumber
      ] & {
        swaps: ([string, string, string, BigNumber, BigNumber, BigNumber] & {
          pool: string;
          tokenIn: string;
          tokenOut: string;
          swapAmount: BigNumber;
          limitReturnAmount: BigNumber;
          maxPrice: BigNumber;
        })[];
        totalOutput: BigNumber;
      }
    >;

    xTokenWrapper(overrides?: CallOverrides): Promise<string>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FeeReceiverSetted(feeReceiver: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ProtocolFeeSetted(protocolFee: null): EventFilter;

    RegistrySetted(registry: null): EventFilter;

    UtilityTokenFeedSetted(utilityTokenFeed: null): EventFilter;

    UtilityTokenSetted(utilityToken: null): EventFilter;

    XTokenWrapperSetted(xTokenWrapper: null): EventFilter;
  };

  estimateGas: {
    batchSwapExactIn(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchSwapExactIn(tuple[],address,address,uint256,uint256,bool)"(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    batchSwapExactOut(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchSwapExactOut(tuple[],address,address,uint256,bool)"(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitPool(
      pool: string,
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitPool(address,uint256,uint256[])"(
      pool: string,
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitswapExternAmountOut(
      pool: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitswapExternAmountOut(address,address,uint256,uint256)"(
      pool: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exitswapPoolAmountIn(
      pool: string,
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exitswapPoolAmountIn(address,address,uint256,uint256)"(
      pool: string,
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    joinPool(
      pool: string,
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "joinPool(address,uint256,uint256[])"(
      pool: string,
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinswapExternAmountIn(
      pool: string,
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "joinswapExternAmountIn(address,address,uint256,uint256)"(
      pool: string,
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinswapPoolAmountOut(
      pool: string,
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "joinswapPoolAmountOut(address,address,uint256,uint256)"(
      pool: string,
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    multihopBatchSwapExactIn(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multihopBatchSwapExactIn(tuple[][],address,address,uint256,uint256,bool)"(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    multihopBatchSwapExactOut(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multihopBatchSwapExactOut(tuple[][],address,address,uint256,bool)"(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeReceiver(address)"(
      _feeReceiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProtocolFee(
      _protocolFee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProtocolFee(address)"(
      _protocolFee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRegistry(_registry: string, overrides?: Overrides): Promise<BigNumber>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUtilityToken(
      _utilityToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUtilityToken(address)"(
      _utilityToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUtilityTokenFeed(
      _utilityTokenFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUtilityTokenFeed(address)"(
      _utilityTokenFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    smartSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "smartSwapExactIn(address,address,uint256,uint256,uint256,bool)"(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    smartSwapExactOut(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "smartSwapExactOut(address,address,uint256,uint256,uint256,bool)"(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    utilityToken(overrides?: CallOverrides): Promise<BigNumber>;

    "utilityToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    utilityTokenFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "utilityTokenFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    viewSplitExactIn(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "viewSplitExactIn(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewSplitExactOut(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "viewSplitExactOut(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xTokenWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    batchSwapExactIn(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchSwapExactIn(tuple[],address,address,uint256,uint256,bool)"(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    batchSwapExactOut(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchSwapExactOut(tuple[],address,address,uint256,bool)"(
      swaps: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitPool(
      pool: string,
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitPool(address,uint256,uint256[])"(
      pool: string,
      poolAmountIn: BigNumberish,
      minAmountsOut: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitswapExternAmountOut(
      pool: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitswapExternAmountOut(address,address,uint256,uint256)"(
      pool: string,
      tokenOut: string,
      tokenAmountOut: BigNumberish,
      maxPoolAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exitswapPoolAmountIn(
      pool: string,
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exitswapPoolAmountIn(address,address,uint256,uint256)"(
      pool: string,
      tokenOut: string,
      poolAmountIn: BigNumberish,
      minAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeReceiver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinPool(
      pool: string,
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinPool(address,uint256,uint256[])"(
      pool: string,
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joinswapExternAmountIn(
      pool: string,
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinswapExternAmountIn(address,address,uint256,uint256)"(
      pool: string,
      tokenIn: string,
      tokenAmountIn: BigNumberish,
      minPoolAmountOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joinswapPoolAmountOut(
      pool: string,
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinswapPoolAmountOut(address,address,uint256,uint256)"(
      pool: string,
      tokenIn: string,
      poolAmountOut: BigNumberish,
      maxAmountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multihopBatchSwapExactIn(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multihopBatchSwapExactIn(tuple[][],address,address,uint256,uint256,bool)"(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multihopBatchSwapExactOut(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multihopBatchSwapExactOut(tuple[][],address,address,uint256,bool)"(
      swapSequences: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      tokenIn: string,
      tokenOut: string,
      maxTotalAmountIn: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setFeeReceiver(
      _feeReceiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeReceiver(address)"(
      _feeReceiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _protocolFee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProtocolFee(address)"(
      _protocolFee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRegistry(address)"(
      _registry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUtilityToken(
      _utilityToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUtilityToken(address)"(
      _utilityToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUtilityTokenFeed(
      _utilityTokenFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUtilityTokenFeed(address)"(
      _utilityTokenFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    smartSwapExactIn(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "smartSwapExactIn(address,address,uint256,uint256,uint256,bool)"(
      tokenIn: string,
      tokenOut: string,
      totalAmountIn: BigNumberish,
      minTotalAmountOut: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    smartSwapExactOut(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "smartSwapExactOut(address,address,uint256,uint256,uint256,bool)"(
      tokenIn: string,
      tokenOut: string,
      totalAmountOut: BigNumberish,
      maxTotalAmountIn: BigNumberish,
      nPools: BigNumberish,
      useUtilityToken: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    utilityToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "utilityToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    utilityTokenFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "utilityTokenFeed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewSplitExactIn(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "viewSplitExactIn(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewSplitExactOut(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "viewSplitExactOut(address,address,uint256,uint256)"(
      tokenIn: string,
      tokenOut: string,
      swapAmount: BigNumberish,
      nPools: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xTokenWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OperationsRegistryInterface extends ethers.utils.Interface {
  functions: {
    "ASSETS_MANAGER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "FEED_MANAGER_ROLE()": FunctionFragment;
    "addTrade(address,bytes4,uint256)": FunctionFragment;
    "allowAsset(address)": FunctionFragment;
    "allowedAssets(address)": FunctionFragment;
    "disallowAsset(address)": FunctionFragment;
    "eurPriceFeed()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAssetsManager(address)": FunctionFragment;
    "setEurPriceFeed(address)": FunctionFragment;
    "setFeedManager(address)": FunctionFragment;
    "tradingBalanceByOperation(address,bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ASSETS_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEED_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTrade",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "allowAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowedAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eurPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetsManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEurPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeedManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tradingBalanceByOperation",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ASSETS_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEED_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeedManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingBalanceByOperation",
    data: BytesLike
  ): Result;

  events: {
    "AssetAllowed(address)": EventFragment;
    "AssetDisallowed(address)": EventFragment;
    "EurPriceFeedSetted(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetDisallowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EurPriceFeedSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class OperationsRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OperationsRegistryInterface;

  functions: {
    ASSETS_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ASSETS_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    FEED_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "FEED_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    addTrade(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addTrade(address,bytes4,uint256)"(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowAsset(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowedAssets(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "allowedAssets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    disallowAsset(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disallowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    eurPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAssetsManager(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAssetsManager(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeedManager(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeedManager(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tradingBalanceByOperation(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tradingBalanceByOperation(address,bytes4)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  ASSETS_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  "ASSETS_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  FEED_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  "FEED_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  addTrade(
    _user: string,
    _operation: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addTrade(address,bytes4,uint256)"(
    _user: string,
    _operation: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowAsset(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allowAsset(address)"(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowedAssets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "allowedAssets(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  disallowAsset(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disallowAsset(address)"(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  eurPriceFeed(overrides?: CallOverrides): Promise<string>;

  "eurPriceFeed()"(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAssetsManager(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAssetsManager(address)"(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEurPriceFeed(
    _eurPriceFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEurPriceFeed(address)"(
    _eurPriceFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeedManager(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeedManager(address)"(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tradingBalanceByOperation(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tradingBalanceByOperation(address,bytes4)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ASSETS_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    "ASSETS_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    FEED_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    "FEED_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    addTrade(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTrade(address,bytes4,uint256)"(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowAsset(_asset: string, overrides?: CallOverrides): Promise<boolean>;

    "allowAsset(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowedAssets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "allowedAssets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disallowAsset(_asset: string, overrides?: CallOverrides): Promise<boolean>;

    "disallowAsset(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eurPriceFeed(overrides?: CallOverrides): Promise<string>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAssetsManager(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAssetsManager(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFeedManager(_account: string, overrides?: CallOverrides): Promise<void>;

    "setFeedManager(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tradingBalanceByOperation(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tradingBalanceByOperation(address,bytes4)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AssetAllowed(asset: string | null): EventFilter;

    AssetDisallowed(asset: string | null): EventFilter;

    EurPriceFeedSetted(newEurPriceFeed: string | null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimateGas: {
    ASSETS_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ASSETS_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    FEED_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "FEED_MANAGER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addTrade(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addTrade(address,bytes4,uint256)"(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowAsset(_asset: string, overrides?: Overrides): Promise<BigNumber>;

    "allowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowedAssets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allowedAssets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disallowAsset(_asset: string, overrides?: Overrides): Promise<BigNumber>;

    "disallowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    eurPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAssetsManager(
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAssetsManager(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeedManager(_account: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeedManager(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tradingBalanceByOperation(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tradingBalanceByOperation(address,bytes4)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ASSETS_MANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ASSETS_MANAGER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEED_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FEED_MANAGER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addTrade(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addTrade(address,bytes4,uint256)"(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowAsset(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowedAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedAssets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disallowAsset(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disallowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    eurPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAssetsManager(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAssetsManager(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeedManager(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeedManager(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tradingBalanceByOperation(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tradingBalanceByOperation(address,bytes4)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

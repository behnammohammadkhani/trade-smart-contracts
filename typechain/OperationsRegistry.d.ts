/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OperationsRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addTrade(address,bytes4,uint256)": FunctionFragment;
    "allowAsset(address)": FunctionFragment;
    "allowedAssets(address)": FunctionFragment;
    "disallowAsset(address)": FunctionFragment;
    "eurPriceFeed()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEurPriceFeed(address)": FunctionFragment;
    "tradingBalanceByOperation(address,bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTrade",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "allowAsset", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowedAssets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eurPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEurPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tradingBalanceByOperation",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingBalanceByOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AssetAllowed(address)": EventFragment;
    "AssetDisallowed(address)": EventFragment;
    "EurPriceFeedSetted(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetDisallowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EurPriceFeedSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class OperationsRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OperationsRegistryInterface;

  functions: {
    addTrade(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addTrade(address,bytes4,uint256)"(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowAsset(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowedAssets(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "allowedAssets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    disallowAsset(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disallowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    eurPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tradingBalanceByOperation(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tradingBalanceByOperation(address,bytes4)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addTrade(
    _user: string,
    _operation: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addTrade(address,bytes4,uint256)"(
    _user: string,
    _operation: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowAsset(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allowAsset(address)"(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowedAssets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "allowedAssets(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  disallowAsset(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disallowAsset(address)"(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  eurPriceFeed(overrides?: CallOverrides): Promise<string>;

  "eurPriceFeed()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setEurPriceFeed(
    _eurPriceFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEurPriceFeed(address)"(
    _eurPriceFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tradingBalanceByOperation(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tradingBalanceByOperation(address,bytes4)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addTrade(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTrade(address,bytes4,uint256)"(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowAsset(_asset: string, overrides?: CallOverrides): Promise<boolean>;

    "allowAsset(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowedAssets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "allowedAssets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disallowAsset(_asset: string, overrides?: CallOverrides): Promise<boolean>;

    "disallowAsset(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eurPriceFeed(overrides?: CallOverrides): Promise<string>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tradingBalanceByOperation(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tradingBalanceByOperation(address,bytes4)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AssetAllowed(asset: string | null): EventFilter;

    AssetDisallowed(asset: string | null): EventFilter;

    EurPriceFeedSetted(newEurPriceFeed: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addTrade(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addTrade(address,bytes4,uint256)"(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowAsset(_asset: string, overrides?: Overrides): Promise<BigNumber>;

    "allowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowedAssets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allowedAssets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disallowAsset(_asset: string, overrides?: Overrides): Promise<BigNumber>;

    "disallowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    eurPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tradingBalanceByOperation(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tradingBalanceByOperation(address,bytes4)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTrade(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addTrade(address,bytes4,uint256)"(
      _user: string,
      _operation: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowAsset(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowedAssets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedAssets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disallowAsset(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disallowAsset(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    eurPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tradingBalanceByOperation(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tradingBalanceByOperation(address,bytes4)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}

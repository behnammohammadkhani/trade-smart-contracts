/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ProtocolFeeMockInterface extends ethers.utils.Interface {
  functions: {
    "batchFee(tuple[],uint256)": FunctionFragment;
    "multihopBatch(tuple[][],uint256)": FunctionFragment;
    "setPotocolFeeAmount(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchFee",
    values: [
      {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multihopBatch",
    values: [
      {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPotocolFeeAmount",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "batchFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multihopBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPotocolFeeAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export class ProtocolFeeMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ProtocolFeeMockInterface;

  functions: {
    batchFee(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "batchFee(tuple[],uint256)"(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    multihopBatch(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "multihopBatch(tuple[][],uint256)"(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setPotocolFeeAmount(
      protocolFeeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPotocolFeeAmount(uint256)"(
      protocolFeeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  batchFee(
    arg0: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "batchFee(tuple[],uint256)"(
    arg0: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[],
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multihopBatch(
    arg0: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[][],
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "multihopBatch(tuple[][],uint256)"(
    arg0: {
      pool: string;
      tokenIn: string;
      tokenOut: string;
      swapAmount: BigNumberish;
      limitReturnAmount: BigNumberish;
      maxPrice: BigNumberish;
    }[][],
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setPotocolFeeAmount(
    protocolFeeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPotocolFeeAmount(uint256)"(
    protocolFeeAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    batchFee(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "batchFee(tuple[],uint256)"(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multihopBatch(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "multihopBatch(tuple[][],uint256)"(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPotocolFeeAmount(
      protocolFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPotocolFeeAmount(uint256)"(
      protocolFeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    batchFee(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "batchFee(tuple[],uint256)"(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multihopBatch(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "multihopBatch(tuple[][],uint256)"(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPotocolFeeAmount(
      protocolFeeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPotocolFeeAmount(uint256)"(
      protocolFeeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchFee(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "batchFee(tuple[],uint256)"(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multihopBatch(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "multihopBatch(tuple[][],uint256)"(
      arg0: {
        pool: string;
        tokenIn: string;
        tokenOut: string;
        swapAmount: BigNumberish;
        limitReturnAmount: BigNumberish;
        maxPrice: BigNumberish;
      }[][],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPotocolFeeAmount(
      protocolFeeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPotocolFeeAmount(uint256)"(
      protocolFeeAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}

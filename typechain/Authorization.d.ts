/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AuthorizationInterface extends ethers.utils.Interface {
  functions: {
    "BFACTORY_NEW_POOL()": FunctionFragment;
    "ERC20_APPROVE()": FunctionFragment;
    "ERC20_BURN_FROM()": FunctionFragment;
    "ERC20_MINT()": FunctionFragment;
    "ERC20_TRANSFER()": FunctionFragment;
    "ERC20_TRANSFER_FROM()": FunctionFragment;
    "POOL_CREATOR()": FunctionFragment;
    "PROTOCOL_CONTRACT()": FunctionFragment;
    "REJECTED_ID()": FunctionFragment;
    "SUSPENDED_ID()": FunctionFragment;
    "TIER_1_ID()": FunctionFragment;
    "TIER_2_ID()": FunctionFragment;
    "eurPriceFeed()": FunctionFragment;
    "initialize(address,address,address,address,address,uint256,bool)": FunctionFragment;
    "isAuthorized(address,address,bytes4,bytes)": FunctionFragment;
    "operationsRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "permissions()": FunctionFragment;
    "poolFactory()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEurPriceFeed(address)": FunctionFragment;
    "setOperationsRegistry(address)": FunctionFragment;
    "setPermissions(address)": FunctionFragment;
    "setPoolFactory(address)": FunctionFragment;
    "setTradingLimit(uint256)": FunctionFragment;
    "setXTokenWrapper(address)": FunctionFragment;
    "tradingLimit()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "xTokenWrapper()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BFACTORY_NEW_POOL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20_APPROVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20_BURN_FROM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20_MINT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20_TRANSFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20_TRANSFER_FROM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_CREATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REJECTED_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUSPENDED_ID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TIER_1_ID", values?: undefined): string;
  encodeFunctionData(functionFragment: "TIER_2_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eurPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operationsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEurPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationsRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setXTokenWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tradingLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xTokenWrapper",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BFACTORY_NEW_POOL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC20_APPROVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC20_BURN_FROM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ERC20_MINT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ERC20_TRANSFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC20_TRANSFER_FROM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_CREATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REJECTED_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUSPENDED_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TIER_1_ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TIER_2_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setXTokenWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xTokenWrapper",
    data: BytesLike
  ): Result;

  events: {
    "EurPriceFeedSet(address)": EventFragment;
    "OperationsRegistrySet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PermissionsSet(address)": EventFragment;
    "PoolFactorySet(address)": EventFragment;
    "TradingLimitSet(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "XTokenWrapperSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EurPriceFeedSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperationsRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolFactorySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingLimitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XTokenWrapperSet"): EventFragment;
}

export class Authorization extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AuthorizationInterface;

  functions: {
    BFACTORY_NEW_POOL(overrides?: CallOverrides): Promise<[string]>;

    "BFACTORY_NEW_POOL()"(overrides?: CallOverrides): Promise<[string]>;

    ERC20_APPROVE(overrides?: CallOverrides): Promise<[string]>;

    "ERC20_APPROVE()"(overrides?: CallOverrides): Promise<[string]>;

    ERC20_BURN_FROM(overrides?: CallOverrides): Promise<[string]>;

    "ERC20_BURN_FROM()"(overrides?: CallOverrides): Promise<[string]>;

    ERC20_MINT(overrides?: CallOverrides): Promise<[string]>;

    "ERC20_MINT()"(overrides?: CallOverrides): Promise<[string]>;

    ERC20_TRANSFER(overrides?: CallOverrides): Promise<[string]>;

    "ERC20_TRANSFER()"(overrides?: CallOverrides): Promise<[string]>;

    ERC20_TRANSFER_FROM(overrides?: CallOverrides): Promise<[string]>;

    "ERC20_TRANSFER_FROM()"(overrides?: CallOverrides): Promise<[string]>;

    POOL_CREATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "POOL_CREATOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    PROTOCOL_CONTRACT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PROTOCOL_CONTRACT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    REJECTED_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    "REJECTED_ID()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUSPENDED_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SUSPENDED_ID()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_1_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    "TIER_1_ID()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_2_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    "TIER_2_ID()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    eurPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _permissions: string,
      _eurPriceFeed: string,
      _operationsRegistry: string,
      _poolFactory: string,
      _xTokenWrapper: string,
      _tradingLimit: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,address,uint256,bool)"(
      _permissions: string,
      _eurPriceFeed: string,
      _operationsRegistry: string,
      _poolFactory: string,
      _xTokenWrapper: string,
      _tradingLimit: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isAuthorized(
      _user: string,
      _asset: string,
      _operation: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAuthorized(address,address,bytes4,bytes)"(
      _user: string,
      _asset: string,
      _operation: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operationsRegistry(overrides?: CallOverrides): Promise<[string]>;

    "operationsRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    permissions(overrides?: CallOverrides): Promise<[string]>;

    "permissions()"(overrides?: CallOverrides): Promise<[string]>;

    poolFactory(overrides?: CallOverrides): Promise<[string]>;

    "poolFactory()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOperationsRegistry(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOperationsRegistry(address)"(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPermissions(
      _permissions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPermissions(address)"(
      _permissions: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPoolFactory(
      _poolFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPoolFactory(address)"(
      _poolFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTradingLimit(
      _tradingLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTradingLimit(uint256)"(
      _tradingLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tradingLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tradingLimit()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    xTokenWrapper(overrides?: CallOverrides): Promise<[string]>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<[string]>;
  };

  BFACTORY_NEW_POOL(overrides?: CallOverrides): Promise<string>;

  "BFACTORY_NEW_POOL()"(overrides?: CallOverrides): Promise<string>;

  ERC20_APPROVE(overrides?: CallOverrides): Promise<string>;

  "ERC20_APPROVE()"(overrides?: CallOverrides): Promise<string>;

  ERC20_BURN_FROM(overrides?: CallOverrides): Promise<string>;

  "ERC20_BURN_FROM()"(overrides?: CallOverrides): Promise<string>;

  ERC20_MINT(overrides?: CallOverrides): Promise<string>;

  "ERC20_MINT()"(overrides?: CallOverrides): Promise<string>;

  ERC20_TRANSFER(overrides?: CallOverrides): Promise<string>;

  "ERC20_TRANSFER()"(overrides?: CallOverrides): Promise<string>;

  ERC20_TRANSFER_FROM(overrides?: CallOverrides): Promise<string>;

  "ERC20_TRANSFER_FROM()"(overrides?: CallOverrides): Promise<string>;

  POOL_CREATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "POOL_CREATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  PROTOCOL_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

  "PROTOCOL_CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

  REJECTED_ID(overrides?: CallOverrides): Promise<BigNumber>;

  "REJECTED_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

  SUSPENDED_ID(overrides?: CallOverrides): Promise<BigNumber>;

  "SUSPENDED_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_1_ID(overrides?: CallOverrides): Promise<BigNumber>;

  "TIER_1_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_2_ID(overrides?: CallOverrides): Promise<BigNumber>;

  "TIER_2_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

  eurPriceFeed(overrides?: CallOverrides): Promise<string>;

  "eurPriceFeed()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _permissions: string,
    _eurPriceFeed: string,
    _operationsRegistry: string,
    _poolFactory: string,
    _xTokenWrapper: string,
    _tradingLimit: BigNumberish,
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,address,uint256,bool)"(
    _permissions: string,
    _eurPriceFeed: string,
    _operationsRegistry: string,
    _poolFactory: string,
    _xTokenWrapper: string,
    _tradingLimit: BigNumberish,
    _paused: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isAuthorized(
    _user: string,
    _asset: string,
    _operation: BytesLike,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAuthorized(address,address,bytes4,bytes)"(
    _user: string,
    _asset: string,
    _operation: BytesLike,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operationsRegistry(overrides?: CallOverrides): Promise<string>;

  "operationsRegistry()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  permissions(overrides?: CallOverrides): Promise<string>;

  "permissions()"(overrides?: CallOverrides): Promise<string>;

  poolFactory(overrides?: CallOverrides): Promise<string>;

  "poolFactory()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setEurPriceFeed(
    _eurPriceFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEurPriceFeed(address)"(
    _eurPriceFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOperationsRegistry(
    _operationsRegistry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOperationsRegistry(address)"(
    _operationsRegistry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPermissions(
    _permissions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPermissions(address)"(
    _permissions: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPoolFactory(
    _poolFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPoolFactory(address)"(
    _poolFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTradingLimit(
    _tradingLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTradingLimit(uint256)"(
    _tradingLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setXTokenWrapper(
    _xTokenWrapper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setXTokenWrapper(address)"(
    _xTokenWrapper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tradingLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "tradingLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  xTokenWrapper(overrides?: CallOverrides): Promise<string>;

  "xTokenWrapper()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BFACTORY_NEW_POOL(overrides?: CallOverrides): Promise<string>;

    "BFACTORY_NEW_POOL()"(overrides?: CallOverrides): Promise<string>;

    ERC20_APPROVE(overrides?: CallOverrides): Promise<string>;

    "ERC20_APPROVE()"(overrides?: CallOverrides): Promise<string>;

    ERC20_BURN_FROM(overrides?: CallOverrides): Promise<string>;

    "ERC20_BURN_FROM()"(overrides?: CallOverrides): Promise<string>;

    ERC20_MINT(overrides?: CallOverrides): Promise<string>;

    "ERC20_MINT()"(overrides?: CallOverrides): Promise<string>;

    ERC20_TRANSFER(overrides?: CallOverrides): Promise<string>;

    "ERC20_TRANSFER()"(overrides?: CallOverrides): Promise<string>;

    ERC20_TRANSFER_FROM(overrides?: CallOverrides): Promise<string>;

    "ERC20_TRANSFER_FROM()"(overrides?: CallOverrides): Promise<string>;

    POOL_CREATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "POOL_CREATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "PROTOCOL_CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    REJECTED_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "REJECTED_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    SUSPENDED_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "SUSPENDED_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_1_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "TIER_1_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_2_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "TIER_2_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    eurPriceFeed(overrides?: CallOverrides): Promise<string>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _permissions: string,
      _eurPriceFeed: string,
      _operationsRegistry: string,
      _poolFactory: string,
      _xTokenWrapper: string,
      _tradingLimit: BigNumberish,
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,address,uint256,bool)"(
      _permissions: string,
      _eurPriceFeed: string,
      _operationsRegistry: string,
      _poolFactory: string,
      _xTokenWrapper: string,
      _tradingLimit: BigNumberish,
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isAuthorized(
      _user: string,
      _asset: string,
      _operation: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAuthorized(address,address,bytes4,bytes)"(
      _user: string,
      _asset: string,
      _operation: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operationsRegistry(overrides?: CallOverrides): Promise<string>;

    "operationsRegistry()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    permissions(overrides?: CallOverrides): Promise<string>;

    "permissions()"(overrides?: CallOverrides): Promise<string>;

    poolFactory(overrides?: CallOverrides): Promise<string>;

    "poolFactory()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperationsRegistry(
      _operationsRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperationsRegistry(address)"(
      _operationsRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissions(
      _permissions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPermissions(address)"(
      _permissions: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFactory(
      _poolFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPoolFactory(address)"(
      _poolFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradingLimit(
      _tradingLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTradingLimit(uint256)"(
      _tradingLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tradingLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "tradingLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    xTokenWrapper(overrides?: CallOverrides): Promise<string>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    EurPriceFeedSet(newEurPriceFeed: string | null): EventFilter;

    OperationsRegistrySet(newOperationsRegistry: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    PermissionsSet(newPermissions: string | null): EventFilter;

    PoolFactorySet(poolFactory: string | null): EventFilter;

    TradingLimitSet(newLimit: null): EventFilter;

    Unpaused(account: null): EventFilter;

    XTokenWrapperSet(xTokenWrapper: string | null): EventFilter;
  };

  estimateGas: {
    BFACTORY_NEW_POOL(overrides?: CallOverrides): Promise<BigNumber>;

    "BFACTORY_NEW_POOL()"(overrides?: CallOverrides): Promise<BigNumber>;

    ERC20_APPROVE(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC20_APPROVE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ERC20_BURN_FROM(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC20_BURN_FROM()"(overrides?: CallOverrides): Promise<BigNumber>;

    ERC20_MINT(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC20_MINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ERC20_TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC20_TRANSFER()"(overrides?: CallOverrides): Promise<BigNumber>;

    ERC20_TRANSFER_FROM(overrides?: CallOverrides): Promise<BigNumber>;

    "ERC20_TRANSFER_FROM()"(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_CREATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "POOL_CREATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "PROTOCOL_CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    REJECTED_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "REJECTED_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    SUSPENDED_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "SUSPENDED_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_1_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "TIER_1_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_2_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "TIER_2_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    eurPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _permissions: string,
      _eurPriceFeed: string,
      _operationsRegistry: string,
      _poolFactory: string,
      _xTokenWrapper: string,
      _tradingLimit: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,address,uint256,bool)"(
      _permissions: string,
      _eurPriceFeed: string,
      _operationsRegistry: string,
      _poolFactory: string,
      _xTokenWrapper: string,
      _tradingLimit: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isAuthorized(
      _user: string,
      _asset: string,
      _operation: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthorized(address,address,bytes4,bytes)"(
      _user: string,
      _asset: string,
      _operation: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operationsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "operationsRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    permissions(overrides?: CallOverrides): Promise<BigNumber>;

    "permissions()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "poolFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOperationsRegistry(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOperationsRegistry(address)"(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPermissions(
      _permissions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPermissions(address)"(
      _permissions: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPoolFactory(
      _poolFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPoolFactory(address)"(
      _poolFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTradingLimit(
      _tradingLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTradingLimit(uint256)"(
      _tradingLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tradingLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "tradingLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    xTokenWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BFACTORY_NEW_POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BFACTORY_NEW_POOL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC20_APPROVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ERC20_APPROVE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERC20_BURN_FROM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ERC20_BURN_FROM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC20_MINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ERC20_MINT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERC20_TRANSFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ERC20_TRANSFER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC20_TRANSFER_FROM(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ERC20_TRANSFER_FROM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POOL_CREATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "POOL_CREATOR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROTOCOL_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PROTOCOL_CONTRACT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REJECTED_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REJECTED_ID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUSPENDED_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SUSPENDED_ID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIER_1_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TIER_1_ID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIER_2_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TIER_2_ID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eurPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _permissions: string,
      _eurPriceFeed: string,
      _operationsRegistry: string,
      _poolFactory: string,
      _xTokenWrapper: string,
      _tradingLimit: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,address,uint256,bool)"(
      _permissions: string,
      _eurPriceFeed: string,
      _operationsRegistry: string,
      _poolFactory: string,
      _xTokenWrapper: string,
      _tradingLimit: BigNumberish,
      _paused: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      _user: string,
      _asset: string,
      _operation: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address,address,bytes4,bytes)"(
      _user: string,
      _asset: string,
      _operation: BytesLike,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operationsRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "operationsRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "permissions()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOperationsRegistry(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOperationsRegistry(address)"(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPermissions(
      _permissions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPermissions(address)"(
      _permissions: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPoolFactory(
      _poolFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPoolFactory(address)"(
      _poolFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTradingLimit(
      _tradingLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTradingLimit(uint256)"(
      _tradingLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tradingLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tradingLimit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    xTokenWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

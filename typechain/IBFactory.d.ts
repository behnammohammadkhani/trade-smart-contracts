/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IBFactoryInterface extends ethers.utils.Interface {
  functions: {
    "isBPool(address)": FunctionFragment;
    "newBPool()": FunctionFragment;
    "setAuthorization(address)": FunctionFragment;
    "setExchProxy(address)": FunctionFragment;
    "setOperationsRegistry(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isBPool", values: [string]): string;
  encodeFunctionData(functionFragment: "newBPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthorization",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationsRegistry",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "isBPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newBPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationsRegistry",
    data: BytesLike
  ): Result;

  events: {};
}

export class IBFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IBFactoryInterface;

  functions: {
    isBPool(b: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isBPool(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newBPool(overrides?: Overrides): Promise<ContractTransaction>;

    "newBPool()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAuthorization(
      _authorization: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuthorization(address)"(
      _authorization: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExchProxy(
      exchProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExchProxy(address)"(
      exchProxy: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOperationsRegistry(
      operationsRegistry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOperationsRegistry(address)"(
      operationsRegistry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  isBPool(b: string, overrides?: CallOverrides): Promise<boolean>;

  "isBPool(address)"(b: string, overrides?: CallOverrides): Promise<boolean>;

  newBPool(overrides?: Overrides): Promise<ContractTransaction>;

  "newBPool()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAuthorization(
    _authorization: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuthorization(address)"(
    _authorization: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExchProxy(
    exchProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExchProxy(address)"(
    exchProxy: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOperationsRegistry(
    operationsRegistry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOperationsRegistry(address)"(
    operationsRegistry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    isBPool(b: string, overrides?: CallOverrides): Promise<boolean>;

    "isBPool(address)"(b: string, overrides?: CallOverrides): Promise<boolean>;

    newBPool(overrides?: CallOverrides): Promise<string>;

    "newBPool()"(overrides?: CallOverrides): Promise<string>;

    setAuthorization(
      _authorization: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuthorization(address)"(
      _authorization: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchProxy(exchProxy: string, overrides?: CallOverrides): Promise<void>;

    "setExchProxy(address)"(
      exchProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperationsRegistry(
      operationsRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperationsRegistry(address)"(
      operationsRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    isBPool(b: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isBPool(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newBPool(overrides?: Overrides): Promise<BigNumber>;

    "newBPool()"(overrides?: Overrides): Promise<BigNumber>;

    setAuthorization(
      _authorization: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuthorization(address)"(
      _authorization: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExchProxy(exchProxy: string, overrides?: Overrides): Promise<BigNumber>;

    "setExchProxy(address)"(
      exchProxy: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOperationsRegistry(
      operationsRegistry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOperationsRegistry(address)"(
      operationsRegistry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isBPool(
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBPool(address)"(
      b: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newBPool(overrides?: Overrides): Promise<PopulatedTransaction>;

    "newBPool()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAuthorization(
      _authorization: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuthorization(address)"(
      _authorization: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExchProxy(
      exchProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExchProxy(address)"(
      exchProxy: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOperationsRegistry(
      operationsRegistry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOperationsRegistry(address)"(
      operationsRegistry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}

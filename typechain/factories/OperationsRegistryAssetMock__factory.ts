/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { OperationsRegistryAssetMock } from "../OperationsRegistryAssetMock";

export class OperationsRegistryAssetMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    operationsRegistry_: string,
    overrides?: Overrides
  ): Promise<OperationsRegistryAssetMock> {
    return super.deploy(
      operationsRegistry_,
      overrides || {}
    ) as Promise<OperationsRegistryAssetMock>;
  }
  getDeployTransaction(
    operationsRegistry_: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(operationsRegistry_, overrides || {});
  }
  attach(address: string): OperationsRegistryAssetMock {
    return super.attach(address) as OperationsRegistryAssetMock;
  }
  connect(signer: Signer): OperationsRegistryAssetMock__factory {
    return super.connect(signer) as OperationsRegistryAssetMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OperationsRegistryAssetMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OperationsRegistryAssetMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "operationsRegistry_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "operationsRegistry",
    outputs: [
      {
        internalType: "contract IOperationsRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "someFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101973803806101978339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610132806100656000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80637062c0941460375780639c008673146053575b600080fd5b605160048036036020811015604b57600080fd5b50356075565b005b605960ed565b604080516001600160a01b039092168252519081900360200190f35b600080546040805163375586b960e21b81523360048201526001600160e01b031984351660248201526044810185905290516001600160a01b039092169263dd561ae49260648084019382900301818387803b15801560d357600080fd5b505af115801560e6573d6000803e3d6000fd5b5050505050565b6000546001600160a01b03168156fea264697066735822122015cbc1cbdb5d5e0b7277b67feda45f33432023ac66191a10f8b6532e22542d7264736f6c63430007040033";

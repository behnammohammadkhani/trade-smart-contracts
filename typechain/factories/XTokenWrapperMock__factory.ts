/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { XTokenWrapperMock } from "../XTokenWrapperMock";

export class XTokenWrapperMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<XTokenWrapperMock> {
    return super.deploy(overrides || {}) as Promise<XTokenWrapperMock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): XTokenWrapperMock {
    return super.attach(address) as XTokenWrapperMock;
  }
  connect(signer: Signer): XTokenWrapperMock__factory {
    return super.connect(signer) as XTokenWrapperMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): XTokenWrapperMock {
    return new Contract(address, _abi, signerOrProvider) as XTokenWrapperMock;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_xToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "unwrap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_xToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "wrap",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "xToken",
    outputs: [
      {
        internalType: "contract IXToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101ee806100206000396000f3fe6080604052600436106100345760003560e01c8063088b699e1461003957806339f476931461006a578063bf376c7a146100aa575b600080fd5b34801561004557600080fd5b5061004e6100d6565b604080516001600160a01b039092168252519081900360200190f35b6100966004803603604081101561008057600080fd5b506001600160a01b0381351690602001356100e5565b604080519115158252519081900360200190f35b610096600480360360408110156100c057600080fd5b506001600160a01b03813516906020013561015f565b6000546001600160a01b031681565b6000826001600160a01b03166379cc679033846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561013e57600080fd5b505af1158015610152573d6000803e3d6000fd5b5060019695505050505050565b6000826001600160a01b03166340c10f1933846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561013e57600080fdfea26469706673582212204364b18fbb4ca26e706d0043e4eb3dc3163097edab90f4eca96b510d1b8bbfde64736f6c63430007040033";

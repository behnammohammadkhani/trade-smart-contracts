/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { AuthorizationMock } from "../AuthorizationMock";

export class AuthorizationMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _authorized: boolean,
    overrides?: Overrides
  ): Promise<AuthorizationMock> {
    return super.deploy(
      _authorized,
      overrides || {}
    ) as Promise<AuthorizationMock>;
  }
  getDeployTransaction(
    _authorized: boolean,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_authorized, overrides || {});
  }
  attach(address: string): AuthorizationMock {
    return super.attach(address) as AuthorizationMock;
  }
  connect(signer: Signer): AuthorizationMock__factory {
    return super.connect(signer) as AuthorizationMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AuthorizationMock {
    return new Contract(address, _abi, signerOrProvider) as AuthorizationMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "_authorized",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "authorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "isAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_authorized",
        type: "bool",
      },
    ],
    name: "setAuthorized",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "setEurPriceFeed",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "setOperationsRegistry",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "setPermissions",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "setPoolFactory",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "setTradingLimit",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "setXTokenWrapper",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161026d38038061026d8339818101604052602081101561003357600080fd5b50516000805491151560ff19909216919091179055610216806100576000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063473597a011610066578063473597a0146100f25780635c50893a14610118578063728daa56146100f25780639b00f17f146100f2578063a3c1e136146100f257610093565b8063148876b9146100985780633b04e2a3146100b7578063456cb7c6146100d6578063456d28d9146100f2575b600080fd5b6100b5600480360360208110156100ae57600080fd5b50356101b2565b005b6100b5600480360360208110156100cd57600080fd5b503515156101b5565b6100de6101c8565b604080519115158252519081900360200190f35b6100b56004803603602081101561010857600080fd5b50356001600160a01b03166101b2565b6100de6004803603608081101561012e57600080fd5b6001600160a01b0382358116926020810135909116916001600160e01b0319604083013516919081019060808101606082013564010000000081111561017357600080fd5b82018360208201111561018557600080fd5b803590602001918460018302840111640100000000831117156101a757600080fd5b5090925090506101d1565b50565b6000805460ff1916911515919091179055565b60005460ff1681565b60005460ff169594505050505056fea26469706673582212209d65f5ceb7d26438de92ab57a6503b7e2b04481f0d960bb121581b68ae9dca5a64736f6c63430007040033";

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface XTokenFactoryInterface extends ethers.utils.Interface {
  functions: {
    "deployXToken(address,string,string,uint8,string,address,address)": FunctionFragment;
    "eurPriceFeed()": FunctionFragment;
    "operationsRegistry()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEurPriceFeed(address)": FunctionFragment;
    "setOperationsRegistry(address)": FunctionFragment;
    "setXTokenWrapper(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "xTokenWrapper()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployXToken",
    values: [string, string, string, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "eurPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operationsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEurPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationsRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setXTokenWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "xTokenWrapper",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "deployXToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operationsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setXTokenWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xTokenWrapper",
    data: BytesLike
  ): Result;

  events: {
    "EurPriceFeedSet(address)": EventFragment;
    "OperationsRegistrySet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "XTokenDeployed(address)": EventFragment;
    "XTokenWrapperSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EurPriceFeedSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperationsRegistrySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XTokenDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XTokenWrapperSet"): EventFragment;
}

export class XTokenFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: XTokenFactoryInterface;

  functions: {
    deployXToken(
      token_: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      kya_: string,
      authorization_: string,
      assetFeed_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployXToken(address,string,string,uint8,string,address,address)"(
      token_: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      kya_: string,
      authorization_: string,
      assetFeed_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    eurPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<[string]>;

    operationsRegistry(overrides?: CallOverrides): Promise<[string]>;

    "operationsRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOperationsRegistry(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOperationsRegistry(address)"(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    xTokenWrapper(overrides?: CallOverrides): Promise<[string]>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<[string]>;
  };

  deployXToken(
    token_: string,
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    kya_: string,
    authorization_: string,
    assetFeed_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployXToken(address,string,string,uint8,string,address,address)"(
    token_: string,
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    kya_: string,
    authorization_: string,
    assetFeed_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  eurPriceFeed(overrides?: CallOverrides): Promise<string>;

  "eurPriceFeed()"(overrides?: CallOverrides): Promise<string>;

  operationsRegistry(overrides?: CallOverrides): Promise<string>;

  "operationsRegistry()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setEurPriceFeed(
    _eurPriceFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEurPriceFeed(address)"(
    _eurPriceFeed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOperationsRegistry(
    _operationsRegistry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOperationsRegistry(address)"(
    _operationsRegistry: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setXTokenWrapper(
    _xTokenWrapper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setXTokenWrapper(address)"(
    _xTokenWrapper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  xTokenWrapper(overrides?: CallOverrides): Promise<string>;

  "xTokenWrapper()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deployXToken(
      token_: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      kya_: string,
      authorization_: string,
      assetFeed_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "deployXToken(address,string,string,uint8,string,address,address)"(
      token_: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      kya_: string,
      authorization_: string,
      assetFeed_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    eurPriceFeed(overrides?: CallOverrides): Promise<string>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<string>;

    operationsRegistry(overrides?: CallOverrides): Promise<string>;

    "operationsRegistry()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperationsRegistry(
      _operationsRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperationsRegistry(address)"(
      _operationsRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    xTokenWrapper(overrides?: CallOverrides): Promise<string>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    EurPriceFeedSet(newEurPriceFeed: string | null): EventFilter;

    OperationsRegistrySet(newOperationsRegistry: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    XTokenDeployed(xToken: string | null): EventFilter;

    XTokenWrapperSet(newXTokenWrapper: string | null): EventFilter;
  };

  estimateGas: {
    deployXToken(
      token_: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      kya_: string,
      authorization_: string,
      assetFeed_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployXToken(address,string,string,uint8,string,address,address)"(
      token_: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      kya_: string,
      authorization_: string,
      assetFeed_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    eurPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    operationsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "operationsRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOperationsRegistry(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOperationsRegistry(address)"(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    xTokenWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployXToken(
      token_: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      kya_: string,
      authorization_: string,
      assetFeed_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployXToken(address,string,string,uint8,string,address,address)"(
      token_: string,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      kya_: string,
      authorization_: string,
      assetFeed_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    eurPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "eurPriceFeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operationsRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "operationsRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setEurPriceFeed(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEurPriceFeed(address)"(
      _eurPriceFeed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOperationsRegistry(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOperationsRegistry(address)"(
      _operationsRegistry: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setXTokenWrapper(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setXTokenWrapper(address)"(
      _xTokenWrapper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    xTokenWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xTokenWrapper()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

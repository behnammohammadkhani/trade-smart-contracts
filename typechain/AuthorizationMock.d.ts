/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AuthorizationMockInterface extends ethers.utils.Interface {
  functions: {
    "authorized()": FunctionFragment;
    "isAuthorized(address,address,bytes4,bytes)": FunctionFragment;
    "setAuthorized(bool)": FunctionFragment;
    "setEurPriceFeed(address)": FunctionFragment;
    "setOperationsRegistry(address)": FunctionFragment;
    "setPermissions(address)": FunctionFragment;
    "setPoolFactory(address)": FunctionFragment;
    "setTradingLimint(uint256)": FunctionFragment;
    "setXTokenWrapper(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authorized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorized",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEurPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperationsRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingLimint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setXTokenWrapper",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEurPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperationsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingLimint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setXTokenWrapper",
    data: BytesLike
  ): Result;

  events: {};
}

export class AuthorizationMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AuthorizationMockInterface;

  functions: {
    authorized(overrides?: CallOverrides): Promise<[boolean]>;

    "authorized()"(overrides?: CallOverrides): Promise<[boolean]>;

    isAuthorized(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAuthorized(address,address,bytes4,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAuthorized(
      _authorized: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuthorized(bool)"(
      _authorized: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEurPriceFeed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "setEurPriceFeed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setOperationsRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "setOperationsRegistry(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setPermissions(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "setPermissions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setPoolFactory(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "setPoolFactory(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setTradingLimint(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "setTradingLimint(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setXTokenWrapper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "setXTokenWrapper(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  authorized(overrides?: CallOverrides): Promise<boolean>;

  "authorized()"(overrides?: CallOverrides): Promise<boolean>;

  isAuthorized(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAuthorized(address,address,bytes4,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAuthorized(
    _authorized: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuthorized(bool)"(
    _authorized: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEurPriceFeed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "setEurPriceFeed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setOperationsRegistry(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "setOperationsRegistry(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setPermissions(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "setPermissions(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setPoolFactory(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "setPoolFactory(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setTradingLimint(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "setTradingLimint(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setXTokenWrapper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "setXTokenWrapper(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    authorized(overrides?: CallOverrides): Promise<boolean>;

    "authorized()"(overrides?: CallOverrides): Promise<boolean>;

    isAuthorized(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAuthorized(address,address,bytes4,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAuthorized(
      _authorized: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuthorized(bool)"(
      _authorized: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEurPriceFeed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "setEurPriceFeed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setOperationsRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setOperationsRegistry(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPermissions(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "setPermissions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPoolFactory(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "setPoolFactory(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setTradingLimint(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setTradingLimint(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setXTokenWrapper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "setXTokenWrapper(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    authorized(overrides?: CallOverrides): Promise<BigNumber>;

    "authorized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isAuthorized(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthorized(address,address,bytes4,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthorized(
      _authorized: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuthorized(bool)"(
      _authorized: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEurPriceFeed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setEurPriceFeed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperationsRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setOperationsRegistry(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPermissions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "setPermissions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPoolFactory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "setPoolFactory(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setTradingLimint(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setTradingLimint(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setXTokenWrapper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setXTokenWrapper(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authorized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "authorized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAuthorized(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address,address,bytes4,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuthorized(
      _authorized: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuthorized(bool)"(
      _authorized: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEurPriceFeed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setEurPriceFeed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOperationsRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setOperationsRegistry(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPermissions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setPermissions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPoolFactory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setPoolFactory(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTradingLimint(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setTradingLimint(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setXTokenWrapper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setXTokenWrapper(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

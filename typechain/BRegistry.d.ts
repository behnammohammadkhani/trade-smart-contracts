/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BRegistryInterface extends ethers.utils.Interface {
  functions: {
    "_getEffectiveLiquidityForPoolsPurge(address,address,address[])": FunctionFragment;
    "addPoolPair(address,address,address)": FunctionFragment;
    "addPools(address[],address,address)": FunctionFragment;
    "getBestPools(address,address)": FunctionFragment;
    "getBestPoolsWithLimit(address,address,uint256)": FunctionFragment;
    "getPairInfo(address,address,address)": FunctionFragment;
    "getPoolsWithLimit(address,address,uint256,uint256)": FunctionFragment;
    "sortPools(address[],uint256)": FunctionFragment;
    "sortPoolsWithPurge(address[],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_getEffectiveLiquidityForPoolsPurge",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPoolPair",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPools",
    values: [string[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestPools",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBestPoolsWithLimit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairInfo",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsWithLimit",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sortPools",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sortPoolsWithPurge",
    values: [string[], BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getEffectiveLiquidityForPoolsPurge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPoolPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBestPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBestPoolsWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sortPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sortPoolsWithPurge",
    data: BytesLike
  ): Result;

  events: {
    "IndicesUpdated(address,address,bytes32,bytes32)": EventFragment;
    "PoolTokenPairAdded(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IndicesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolTokenPairAdded"): EventFragment;
}

export class BRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BRegistryInterface;

  functions: {
    _getEffectiveLiquidityForPoolsPurge(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_getEffectiveLiquidityForPoolsPurge(address,address,address[])"(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPoolPair(
      pool: string,
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPoolPair(address,address,address)"(
      pool: string,
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPools(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPools(address[],address,address)"(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBestPools(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    "getBestPools(address,address)"(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    getBestPoolsWithLimit(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    "getBestPoolsWithLimit(address,address,uint256)"(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    getPairInfo(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        weight1: BigNumber;
        weight2: BigNumber;
        swapFee: BigNumber;
      }
    >;

    "getPairInfo(address,address,address)"(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        weight1: BigNumber;
        weight2: BigNumber;
        swapFee: BigNumber;
      }
    >;

    getPoolsWithLimit(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    "getPoolsWithLimit(address,address,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    sortPools(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sortPools(address[],uint256)"(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sortPoolsWithPurge(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sortPoolsWithPurge(address[],uint256)"(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  _getEffectiveLiquidityForPoolsPurge(
    token1: string,
    token2: string,
    pools: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_getEffectiveLiquidityForPoolsPurge(address,address,address[])"(
    token1: string,
    token2: string,
    pools: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPoolPair(
    pool: string,
    token1: string,
    token2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPoolPair(address,address,address)"(
    pool: string,
    token1: string,
    token2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPools(
    pools: string[],
    token1: string,
    token2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPools(address[],address,address)"(
    pools: string[],
    token1: string,
    token2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBestPools(
    fromToken: string,
    destToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getBestPools(address,address)"(
    fromToken: string,
    destToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBestPoolsWithLimit(
    fromToken: string,
    destToken: string,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getBestPoolsWithLimit(address,address,uint256)"(
    fromToken: string,
    destToken: string,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getPairInfo(
    pool: string,
    fromToken: string,
    destToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      weight1: BigNumber;
      weight2: BigNumber;
      swapFee: BigNumber;
    }
  >;

  "getPairInfo(address,address,address)"(
    pool: string,
    fromToken: string,
    destToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      weight1: BigNumber;
      weight2: BigNumber;
      swapFee: BigNumber;
    }
  >;

  getPoolsWithLimit(
    fromToken: string,
    destToken: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getPoolsWithLimit(address,address,uint256,uint256)"(
    fromToken: string,
    destToken: string,
    offset: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  sortPools(
    tokens: string[],
    lengthLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sortPools(address[],uint256)"(
    tokens: string[],
    lengthLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sortPoolsWithPurge(
    tokens: string[],
    lengthLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sortPoolsWithPurge(address[],uint256)"(
    tokens: string[],
    lengthLimit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    _getEffectiveLiquidityForPoolsPurge(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "_getEffectiveLiquidityForPoolsPurge(address,address,address[])"(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    addPoolPair(
      pool: string,
      token1: string,
      token2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addPoolPair(address,address,address)"(
      pool: string,
      token1: string,
      token2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPools(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "addPools(address[],address,address)"(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBestPools(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getBestPools(address,address)"(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBestPoolsWithLimit(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getBestPoolsWithLimit(address,address,uint256)"(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getPairInfo(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        weight1: BigNumber;
        weight2: BigNumber;
        swapFee: BigNumber;
      }
    >;

    "getPairInfo(address,address,address)"(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        weight1: BigNumber;
        weight2: BigNumber;
        swapFee: BigNumber;
      }
    >;

    getPoolsWithLimit(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getPoolsWithLimit(address,address,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    sortPools(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sortPools(address[],uint256)"(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sortPoolsWithPurge(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sortPoolsWithPurge(address[],uint256)"(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    IndicesUpdated(
      token1: string | null,
      token2: string | null,
      oldIndices: null,
      newIndices: null
    ): EventFilter;

    PoolTokenPairAdded(
      pool: string | null,
      token1: string | null,
      token2: string | null
    ): EventFilter;
  };

  estimateGas: {
    _getEffectiveLiquidityForPoolsPurge(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_getEffectiveLiquidityForPoolsPurge(address,address,address[])"(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPoolPair(
      pool: string,
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPoolPair(address,address,address)"(
      pool: string,
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPools(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPools(address[],address,address)"(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBestPools(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestPools(address,address)"(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBestPoolsWithLimit(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBestPoolsWithLimit(address,address,uint256)"(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairInfo(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPairInfo(address,address,address)"(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolsWithLimit(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolsWithLimit(address,address,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sortPools(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sortPools(address[],uint256)"(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sortPoolsWithPurge(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sortPoolsWithPurge(address[],uint256)"(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getEffectiveLiquidityForPoolsPurge(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_getEffectiveLiquidityForPoolsPurge(address,address,address[])"(
      token1: string,
      token2: string,
      pools: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPoolPair(
      pool: string,
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPoolPair(address,address,address)"(
      pool: string,
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPools(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPools(address[],address,address)"(
      pools: string[],
      token1: string,
      token2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBestPools(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestPools(address,address)"(
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBestPoolsWithLimit(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBestPoolsWithLimit(address,address,uint256)"(
      fromToken: string,
      destToken: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairInfo(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPairInfo(address,address,address)"(
      pool: string,
      fromToken: string,
      destToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolsWithLimit(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolsWithLimit(address,address,uint256,uint256)"(
      fromToken: string,
      destToken: string,
      offset: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sortPools(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sortPools(address[],uint256)"(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sortPoolsWithPurge(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sortPoolsWithPurge(address[],uint256)"(
      tokens: string[],
      lengthLimit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
